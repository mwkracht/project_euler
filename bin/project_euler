#!/usr/bin/env python
"""Simple wrapper script to invoke problem solutions via command line."""
import argparse
import sys
import timeit

import project_euler


SUCCESS = 0
FAILURE = 1

REQ_PROBLEM_LEN = 3
USEC_PER_SEC = 1000000


# redefining default timer template to make 'timeit' return
#     test's execution timing and the function return value
new_template = """
def inner(_it, _timer{init}):
    {setup}
    _t0 = _timer()
    for _i in _it:
        ret_val = {stmt}
    _t1 = _timer()
    return _t1 - _t0, ret_val
"""
timeit.template = new_template


def main():
    parser = argparse.ArgumentParser(description='Run a specific project euler solution.')
    parser.add_argument('problem', help='Problem number')
    parser.add_argument(
        'executions', type=int, default=1, nargs='?', help='Times to execute solution for timing purposes'
    )
    args = parser.parse_args()

    # Prefix problem number with '0' to enforce requiste problem number length
    problem_number = '0' * (REQ_PROBLEM_LEN - len(args.problem)) + args.problem

    try:
        problem_module = getattr(project_euler, 'problem_{0}'.format(problem_number))
        solution_method = getattr(problem_module, 'SOLUTIONS')[-1]
    except AttributeError:
        print('No solution found for Problem {0}'.format(problem_number))
        return FAILURE

    total_execution_sec, solution = timeit.timeit(solution_method, number=args.executions)
    avg_execution_usec = (total_execution_sec * USEC_PER_SEC) / args.executions

    print('Solution: {0}'.format(solution))
    print('Avg Execution: {0:.2f} usec'.format(avg_execution_usec))
    return SUCCESS


if __name__ == "__main__":
    sys.exit(main())
